name: AI Code Review

on:
  pull_request:
    types: [opened, synchronize, reopened]

permissions:
  contents: read
  pull-requests: write
  issues: write

jobs:
  review:
    runs-on: ubuntu-latest
    concurrency:
      group: ai-review-${{ github.event.pull_request.number }}
      cancel-in-progress: true

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Get PR diff
        run: |
          git diff ${{ github.event.pull_request.base.sha }} ${{ github.event.pull_request.head.sha }} --unified=3 > pr_diff.txt
          echo "==== Changed files ===="
          git diff --name-only ${{ github.event.pull_request.base.sha }} ${{ github.event.pull_request.head.sha }}
          echo "==== First 40 lines of diff ===="
          head -n 40 pr_diff.txt || true

      - name: Upload diff artifact
        uses: actions/upload-artifact@v4
        with:
          name: pr-diff
          path: pr_diff.txt

      - name: Check diff not empty
        run: |
          if [ ! -s pr_diff.txt ]; then
            echo "No changes to review â€” skipping AI step."
            exit 0
          fi

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Run AI Review
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          OPENAI_MODEL: ${{ vars.OPENAI_MODEL || 'gpt-4o-mini' }}
        run: |
          npm init -y >/dev/null 2>&1
          npm install openai@latest >/dev/null 2>&1
          node --input-type=module - <<'EOF'
          import fs from "fs";
          import OpenAI from "openai";

          async function main() {
            const diff = fs.readFileSync("pr_diff.txt","utf8");
            const client = new OpenAI({ apiKey: process.env.OPENAI_API_KEY });
            const model = process.env.OPENAI_MODEL || "gpt-4o-mini";
            const sys = "You are a senior frontend reviewer. Review ONLY this diff. Return strict JSON {comments:[], summary}.";
            const user = "# DIFF\n" + diff;

            try {
              const resp = await client.chat.completions.create({
                model,
                response_format: { type: "json_object" },
                temperature: 0,
                messages: [
                  { role: "system", content: sys },
                  { role: "user", content: user }
                ]
              });
              const content = resp.choices?.[0]?.message?.content || "";
              if (!content) throw new Error("Empty LLM response");
              fs.writeFileSync("review.json", content);
            } catch (e) {
              console.error("AI call failed:", e?.message || e);
              fs.writeFileSync("review.json", JSON.stringify({
                comments: [],
                summary: "AI call failed: " + (e?.message || String(e))
              }, null, 2));
              process.exitCode = 1; // surface failure in logs
            }
          }
          await main();
          EOF

      - name: Show AI output (debug)
        if: always()
        run: |
          echo "=== review.json (first 2000 chars) ==="
          head -c 2000 review.json || true
          echo
          echo "=== file size ==="
          wc -c review.json || true
          test -s review.json || { echo "review.json is empty"; exit 1; }

      - name: Upload AI review result
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: pr-review
          path: review.json

      - name: Post PR summary comment
        if: always()
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            try {
              const fs = require('fs');
              let data = { summary: "No summary returned." };
              try {
                const raw = fs.readFileSync('review.json','utf8');
                console.log("review.json sample:", raw.slice(0, 300));
                data = JSON.parse(raw);
              } catch (e) {
                core.warning('Failed to parse review.json: ' + (e?.message || e));
              }
              const body = `## ðŸ¤– AI Review Summary\n${data.summary || 'No summary returned.'}\n\n*Generated by AI.*`;
              const res = await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.payload.pull_request.number,
                body
              });
              console.log("Comment created id:", res.data?.id);
            } catch (err) {
              core.setFailed("Posting PR comment failed: " + (err?.message || err));
            }
