name: AI Code Review

on:
  pull_request:
    types: [opened, synchronize, reopened]

permissions:
  contents: read
  pull-requests: write
  issues: write

jobs:
  review:
    runs-on: ubuntu-latest
    concurrency:
      group: ai-review-${{ github.event.pull_request.number }}
      cancel-in-progress: true

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Get PR diff
        run: |
          git diff ${{ github.event.pull_request.base.sha }} ${{ github.event.pull_request.head.sha }} --unified=3 > pr_diff.txt
          echo "==== Changed files ===="
          git diff --name-only ${{ github.event.pull_request.base.sha }} ${{ github.event.pull_request.head.sha }}
          echo "==== First 40 lines of diff ===="
          head -n 40 pr_diff.txt || true

      - name: Upload diff artifact
        uses: actions/upload-artifact@v4
        with:
          name: pr-diff
          path: pr_diff.txt

      - name: Check diff not empty
        id: diffcheck
        run: |
          if [ ! -s pr_diff.txt ]; then
            echo "has_diff=false" >> "$GITHUB_OUTPUT"
            echo "No changes to review â€” skipping AI step."
          else
            echo "has_diff=true" >> "$GITHUB_OUTPUT"
          fi

      - name: Setup Node
        if: steps.diffcheck.outputs.has_diff == 'true'
        uses: actions/setup-node@v4
        with:
          node-version: 20

      # ---- LLM call: request structured findings with head file line numbers
      - name: Run AI Review
        if: steps.diffcheck.outputs.has_diff == 'true'
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          # GitHub expressions don't support "||". Provide default in code instead.
          OPENAI_MODEL: ${{ vars.OPENAI_MODEL }}
        run: |
          npm init -y >/dev/null 2>&1
          npm install openai@latest >/dev/null 2>&1
          node --input-type=module - <<'EOF'
          import fs from "fs";
          import OpenAI from "openai";

          const diff = fs.readFileSync("pr_diff.txt","utf8");
          const client = new OpenAI({ apiKey: process.env.OPENAI_API_KEY });
          const model = process.env.OPENAI_MODEL || "gpt-4o-mini";

          const sys =
            "You are a senior frontend reviewer. You ONLY see a unified git diff. " +
            "Return strict JSON with {comments:[], summary}. " +
            "Each comment MUST include: file (repo-relative path as in the diff), start_line (line number in the HEAD file), end_line (optional), " +
            "category (performance|security|a11y|practice), title, rationale, evidence (array of exact lines from the diff), " +
            "suggestion (concise patch or code block), confidence (1-5). " +
            "Be specific and actionable. If unsure about a line number, omit that comment.";

          const example = {
            comments: [{
              file: "src/DemoIssue.tsx",
              start_line: 12,
              end_line: 16,
              category: "practice",
              title: "Missing dependency in useEffect",
              rationale: "Effect uses `query` but dependency array is empty; this can cause stale requests.",
              evidence: ["useEffect(() => {", "  fetch(`/api/search?q=${query}`)...", "}, []);"],
              suggestion: "```diff\n- useEffect(() => { ... }, []);\n+ useEffect(() => { ... }, [query]);\n```",
              confidence: 4
            }],
            summary: "Fix hook dependencies; sanitize innerHTML; add image alt and dimensions."
          };

          const user = `# DIFF
          ${diff}

          # OUTPUT FORMAT (JSON)
          ${JSON.stringify(example, null, 2)}
          `;

          async function main() {
            try {
              const resp = await client.chat.completions.create({
                model,
                response_format: { type: "json_object" },
                temperature: 0,
                messages: [
                  { role: "system", content: sys },
                  { role: "user", content: user }
                ]
              });
              const content = resp.choices?.[0]?.message?.content || "";
              if (!content) throw new Error("Empty LLM response");
              fs.writeFileSync("review.json", content);
            } catch (e) {
              console.error("AI call failed:", e?.message || e);
              fs.writeFileSync("review.json", JSON.stringify({
                comments: [],
                summary: "AI call failed: " + (e?.message || String(e))
              }, null, 2));
              process.exitCode = 1;
            }
          }
          await main();
          EOF

      - name: Show AI output (debug)
        if: always()
        run: |
          echo "=== review.json (first 2000 chars) ==="
          head -c 2000 review.json || true
          echo
          echo "=== file size ==="
          wc -c review.json || true
          test -s review.json || { echo "review.json is empty"; exit 1; }

      - name: Upload AI review result
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: pr-review
          path: review.json

      # ---- Create an inline review with comments on the diff
      - name: Post inline review comments
        if: always()
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const fs = require('fs');
            const pull_number = context.payload.pull_request.number;
            const headSha = context.payload.pull_request.head.sha;

            let data = { comments: [], summary: "No summary returned." };
            try {
              data = JSON.parse(fs.readFileSync('review.json','utf8'));
            } catch (e) {
              core.warning('Failed to parse review.json: ' + (e?.message || e));
            }

            // Build review comments array for GitHub's createReview
            // We use line numbers relative to HEAD, on the RIGHT side.
            const MAX = 12; // cap to avoid spam
            const comments = (data.comments || []).slice(0, MAX).flatMap(c => {
              if (!c?.file || !Number.isInteger(c?.start_line)) return [];
              const title = c.title || "AI Review";
              const rationale = c.rationale ? `\n\n${c.rationale}` : "";
              const ev = Array.isArray(c.evidence) && c.evidence.length ? ("\n\n**Evidence:**\n" + c.evidence.map(l => `> ${l}`).join("\n")) : "";
              const suggestion = c.suggestion ? ("\n\n" + c.suggestion) : "";
              const meta = `\n\n_Category:_ **${(c.category||'note').toUpperCase()}** Â· _Confidence:_ **${c.confidence ?? '-'} / 5**`;

              return [{
                path: c.file,
                line: c.start_line,
                side: "RIGHT",
                body: `**${title}**${meta}${rationale}${ev}${suggestion}`
              }];
            });

            if (comments.length === 0) {
              core.info("No inline comments to post; will still post a summary note next.");
            } else {
              const res = await github.rest.pulls.createReview({
                owner: context.repo.owner,
                repo: context.repo.repo,
                pull_number,
                commit_id: headSha,
                event: "COMMENT",
                comments
              });
              core.info("Inline review posted. id=" + res.data?.id);
            }

      # ---- Also post a high-level summary comment (one message on the PR)
      - name: Post PR summary comment
        if: always()
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const fs = require('fs');
            let data = { comments: [], summary: "No summary returned." };
            try {
              data = JSON.parse(fs.readFileSync('review.json','utf8'));
            } catch (e) {
              core.warning('Failed to parse review.json: ' + (e?.message || e));
            }
            const body = `## ðŸ¤– AI Review Summary
            ${data.summary || 'â€”'}

            *Generated by AI.*`;

            const res = await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.payload.pull_request.number,
              body
            });
            core.info("Summary comment id: " + res.data?.id);
