name: AI Code Review

on:
  pull_request:
    types: [opened, synchronize, reopened]

permissions:
  contents: read
  pull-requests: write
  issues: write   # needed to post a PR comment

jobs:
  review:
    runs-on: ubuntu-latest
    concurrency:
      group: ai-review-${{ github.event.pull_request.number }}
      cancel-in-progress: true

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Get PR diff
        run: |
          git diff ${{ github.event.pull_request.base.sha }} ${{ github.event.pull_request.head.sha }} --unified=3 > pr_diff.txt
          echo "==== Changed files ===="
          git diff --name-only ${{ github.event.pull_request.base.sha }} ${{ github.event.pull_request.head.sha }}
          echo "==== First 40 lines of diff ===="
          head -n 40 pr_diff.txt || true

      # Upload the diff (debugging)
      - name: Upload diff artifact
        uses: actions/upload-artifact@v4
        with:
          name: pr-diff
          path: pr_diff.txt

      # Run OpenAI review
      - name: Run AI Review
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          OPENAI_MODEL: ${{ vars.OPENAI_MODEL || 'gpt-4o-mini' }}
        run: |
          npm init -y >/dev/null 2>&1
          npm install openai@latest >/dev/null 2>&1
          node --input-type=module - <<'EOF'
          import fs from "fs";
          import OpenAI from "openai";

          const client = new OpenAI({ apiKey: process.env.OPENAI_API_KEY });
          const diff = fs.readFileSync("pr_diff.txt","utf8");
          const model = process.env.OPENAI_MODEL || "gpt-4o-mini";

          const sys = "You are a senior frontend reviewer. Review ONLY this diff. Return strict JSON {comments:[], summary}.";
          const user = "# DIFF\\n" + diff;

          const resp = await client.chat.completions.create({
            model,
            response_format: { type: "json_object" },
            temperature: 0,
            messages: [
              { role: "system", content: sys },
              { role: "user", content: user }
            ]
          });

          fs.writeFileSync("review.json", resp.choices[0].message.content);
          EOF

      # Upload the AI review result
      - name: Upload AI review result
        uses: actions/upload-artifact@v4
        with:
          name: pr-review
          path: review.json

      # Post summary as a PR comment
      - name: Post PR summary comment
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const data = JSON.parse(fs.readFileSync('review.json','utf8'));
            const body = `## ðŸ¤– AI Review Summary\n${data.summary || 'No summary returned.'}\n\n*Generated by AI.*`;
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.payload.pull_request.number,
              body
            });
